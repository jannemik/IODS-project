library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("springgreen4", "springgreen2", "steelblue4", "darkgoldernrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.5) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.5), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("springgreen4", "springgreen2", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.5) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.5), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("springgreen4", "springgreen2", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.6) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.5), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("springgreen4", "springgreen2", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.7) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.6), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("cadetblue4", "cadetblue3", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.7) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.6), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("darkseagreen4", "darkseagreen3", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.7) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.6), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("darkseagreen4", "darkseagreen3", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.8), size=1.8) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.7), position = position_dodge(0.8)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("darkseagreen4", "darkseagreen3", "navy", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.8), size=1.8) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.7), position = position_dodge(0.8)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
#Read the data file that was created in the last exercise
human <- read.csv(file = "human.csv")
#Save the data
setwd("~/Documents/GitHub/IODS-project/data")
#Read the data file that was created in the last exercise
human <- read.csv(file = "human.csv")
#Transform the Gross National Income (GNI) variable to numeric
library(stringr)
str(human$gni)
str_replace(human$gni, pattern=",", replace ="") %>% as.numeric()
human$gni <- str_replace(human$gni, pattern=",", replace ="") %>% as.numeric()
str(human$gni)
#Remove unneeded columns
keep_columns <- c("country", "f2edu", "flabour", "expedu", "le", "gni", "matmort", "adolbirthrate", "parliament")
human_ <- select(human, one_of(keep_columns))
#Remove unneeded columns
library(dplyr)
keep_columns <- c("country", "f2edu", "flabour", "expedu", "le", "gni", "matmort", "adolbirthrate", "parliament")
human_ <- select(human, one_of(keep_columns))
#Remove all rows with missing values
# filter out all rows with NA values
comp <- complete.cases(human_)
human_ <- filter(human_, comp == TRUE)
#Remove all rows with missing values
# filter out all rows with NA values
complete.cases(human)
#Remove all rows with missing values
# filter out all rows with NA values
complete.cases(human_)
#Remove the observations which relate to regions instead of countries
tail(human, n = 10)
#Remove the observations which relate to regions instead of countries (there are 7 of them)
tail(human, n = 10)
last <- nrow(human) - 7
human_ <- human[1:last, ]
#Remove the observations which relate to regions instead of countries (there are 7 of them)
tail(human_, n = 10)
last <- nrow(human_) - 7
human_ <- human_[1:last, ]
#Add countries as row names
rownames(human_) <- human_$country
# remove the Country variable
human_ <- select(human_, -country)
#Remove all rows with missing values
complete.cases(human_)
comp <- complete.cases(human_)
human_ <- filter(human_, comp == TRUE)
#Remove the observations which relate to regions instead of countries (there are 7 of them)
tail(human_, n = 10)
last <- nrow(human_) - 7
human_ <- human_[1:last, ]
#Add countries as row names
rownames(human_) <- human_$country
# remove the Country variable
human_ <- select(human_, -country)
#Read the data file that was created in the last exercise
human <- read.csv(file = "human.csv")
#Transform the Gross National Income (GNI) variable to numeric
library(stringr)
str(human$gni)
human$gni <- str_replace(human$gni, pattern=",", replace ="") %>% as.numeric()
#Remove unneeded columns
library(dplyr)
keep_columns <- c("country", "f2edu", "flabour", "expedu", "le", "gni", "matmort", "adolbirthrate", "parliament")
human_ <- select(human, one_of(keep_columns))
#Remove all rows with missing values
complete.cases(human_)
comp <- complete.cases(human_)
human_ <- filter(human_, comp == TRUE)
#Remove the observations which relate to regions instead of countries (there are 7 of them)
tail(human_, n = 10)
last <- nrow(human_) - 7
human_ <- human_[1:last, ]
#Add countries as row names
rownames(human_) <- human_$country
# remove the Country variable
human_ <- select(human_, -country)
#Examine the data
str(human_)
#Save the modified data (overwrite the old)
write.csv(human, file = "human.csv", row.names = TRUE)
human <- read.csv(file = "human.csv")
setwd("~/Documents/GitHub/IODS-project/data")
human <- read.csv(file = "human.csv")
str(human)
dim(human)
setwd("~/Documents/GitHub/IODS-project/data")
human <- read.csv(file = "human.csv")
str(human)
dim(human)
#Save the modified data (overwrite the old)
write.csv(human_, file = "human.csv", row.names = TRUE)
setwd("~/Documents/GitHub/IODS-project/data")
human <- read.csv(file = "human.csv")
str(human)
dim(human)
setwd("~/Documents/GitHub/IODS-project/data")
human <- read.csv(file = "human.csv", row.names = TRUE)
setwd("~/Documents/GitHub/IODS-project/data")
human <- read.csv(file = "human.csv", row.names = 1)
str(human)
dim(human)
setwd("~/Documents/GitHub/IODS-project/data")
human <- read.csv(file = "human.csv", row.names = 1)
str(human)
dim(human)
library(GGally)
ggpairs(human)
cor(human) %>% corrplot()
summary(human)
library(GGally)
ggpairs(human)
pca_human <- prcomp(human)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
pca_human <- prcomp(human)
biplot(pca_human, choices = 1:2, cex = c(0.8, 1), col = c("grey40", "deeppink2"))
pca_human <- prcomp(human)
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"))
human_std <- scale(human)
pca_human <- prcomp(human_std)
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"))
human_std <- scale(human)
pca_human <- prcomp(human_std)
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"))
human_std <- scale(human)
pca_human <- prcomp(human_std)
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"))
#Scale
human_std <- scale(human)
#Estimation
pca_human <- prcomp(human_std)
# rounded percetanges of variance captured by each PC
pca_pr <- round(100*pca_human$importance[2, ], digits = 1)
# create object pc_lab to be used as axis labels
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
#Scale
human_std <- scale(human)
#Estimation
pca_human <- prcomp(human_std)
s <- summary(pca_human)
# rounded percetanges of variance captured by each PC
pca_pr <- round(100*s$importance[2, ], digits = 1)
# create object pc_lab to be used as axis labels
pc_lab <- paste0(names(pca_pr), " (", pca_pr, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
#Scale
human_std <- scale(human)
#Estimation
pca_human <- prcomp(human_std)
s <- summary(pca_human)
# rounded percetanges of variance captured by each PC
pca_pr <- round(100*s$importance[2, ], digits = 1)
# create object pc_lab to be used as axis labels
pc_lab <- paste0(c("Human development", "Gender equality"), " (", pca_pr, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
#The model
pca_human <- prcomp(human)
s <- summary(pca_human)
# rounded percetanges of variance captured by each PC
pca_pr <- round(100*s$importance[2, ], digits = 1)
# create object pc_lab to be used as axis labels
pc_lab <- paste0(c("Human development", "Gender equality"), " (", pca_pr, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
#Scale
human_std <- scale(human)
#Estimation
pca_human <- prcomp(human_std)
s <- summary(pca_human)
# rounded percetanges of variance captured by each PC
pca_pr <- round(100*s$importance[2, ], digits = 1)
# create object pc_lab to be used as axis labels
pc_lab <- paste0(c("Human development", "Gender equality"), " (", pca_pr, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
#The model
pca_human <- prcomp(human)
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
#The model
pca_human <- prcomp(human)
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"))
#The model
pca_human <- prcomp(human)
summary(pca_human)
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"))
#Scale
human_std <- scale(human)
#Estimation
pca_human <- prcomp(human_std)
s <- summary(pca_human)
# rounded percetanges of variance captured by each PC
pca_pr <- round(100*s$importance[2, ], digits = 1)
# create object pc_lab to be used as axis labels
pc_lab <- paste0(c("Underdevelopment", "Gender equality"), " (", pca_pr, "%)")
biplot(pca_human, choices = 1:2, cex = c(0.5, 0.8), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
install.packages("FactoMineR")
library(Factominer)
library(FactoMineR)
data("tea")
library(FactoMineR)
data("tea")
str(tea)
dim(tea)
# multiple correspondence analysis
mca <- MCA(tea, graph = FALSE)
library(FactoMineR)
data("tea")
str(tea)
dim(tea)
# multiple correspondence analysis
mca <- MCA(tea, graph = FALSE)
# column names to keep in the dataset
keep_columns <- c("Tea", "How", "how", "sugar", "where", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "age_Q", "sex", "where", "SPC", "price", "spirituality", "healthy", "sophisticated")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "price", "spirituality", "healthy", "sophisticated")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "spirituality", "healthy", "sophisticated")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "spirituality", "healthy", "sophisticated")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("ind"), habillage = "quali")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "spirituality", "healthy", "sophisticated", "frequency")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "spirituality", "healthy", "sophisticated", "frequency", "How")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "spirituality", "healthy", "sophisticated", "frequency")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "spirituality", "healthy", "sophisticated", "frequency")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "spirituality", "healthy", "sophisticated", "frequency", "relaxing")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "spirituality", "healthy", "sophisticated", "frequency")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "healthy", "sophisticated", "frequency")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "healthy", "sophisticated", "frequency", "breakfast")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
tea$SPC
# column names to keep in the dataset
keep_columns <- c("Tea", "sex", "where", "SPC", "friends", "healthy", "sophisticated", "frequency", "breakfast", "lunch")
# select the 'keep_columns' to create a new dataset
tea_time <- select(tea, one_of(keep_columns))
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
# multiple correspondence analysis
mca <- MCA(tea_time, graph = FALSE)
# summary of the model
summary(mca)
# visualize MCA
plot(mca, invisible=c("var"), habillage = "quali")
plot(mca, invisible=c("ind"), habillage = "quali")
library(FactoMineR)
tea <- data("tea")
str(tea)
dim(tea)
