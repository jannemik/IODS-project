labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("tomato4", "tomato1", "springgreen4", "slategray3", "slategray2", "slategray1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.5) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.5), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("springgreen4", "springgreen2", "steelblue4", "darkgoldernrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.5) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.5), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("springgreen4", "springgreen2", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.5) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.5), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("springgreen4", "springgreen2", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.6) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.5), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("springgreen4", "springgreen2", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.7) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.6), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("cadetblue4", "cadetblue3", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.7) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.6), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("darkseagreen4", "darkseagreen3", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.7), size=1.7) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.6), position = position_dodge(0.7)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("darkseagreen4", "darkseagreen3", "steelblue4", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.8), size=1.8) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.7), position = position_dodge(0.8)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
data <- read.csv2("~/Documents/data.csv")
library(ggplot2)
data$condition <- factor(data$condition,levels=c('Injury', 'Externalizing', 'Internalizing', 'Mental', 'Somatic', 'Any'))
data$model <- factor(data$model,levels=c('M6', 'M5', 'M4', 'M3', 'M2', 'M1'),
labels = c("M6: M2 within siblings", "M5: crude within siblings", "M4: M3 (siblings only)", "M3: M2 + observed background", "M2: birth year, month & order", "M1: crude"))
data$sex <- factor(data$sex,levels=c('Girls', 'Boys'))
myColors <- c("darkseagreen4", "darkseagreen3", "navy", "darkgoldenrod4", "darkgoldenrod3", "darkgoldenrod1")
labels <- c(Girls = "Girls (n=58,824/21,600)", Boys = "Boys (n=60,719/22,810)")
#Tytöt ja pojat vierekkäin
ggplot(data, aes(y=b, x=condition, colour=model)) +
geom_point(position=position_dodge(width=0.8), size=1.8) +
geom_errorbar(aes(ymin=lower, ymax=upper, width = 0.7), position = position_dodge(0.8)) +
theme_bw(base_size=16) + theme(panel.grid.major.y = element_blank(), legend.text=element_text(size=11), legend.background = element_rect(fill="white", linetype = "solid", colour = "black"), plot.caption=element_text(hjust = 0, face = "italic")) +
coord_flip() + facet_grid(. ~ sex, labeller=labeller(sex = labels)) + geom_hline(yintercept = 0, linetype = "dashed")  +
theme(legend.position = c(0, 1), legend.justification = c(0, 1), legend.direction='vertical') +
guides(col = guide_legend(reverse = TRUE, title = NULL)) + xlab(NULL) +
scale_x_discrete(position = "top") + scale_color_manual(values=myColors)
install.packages("MASS")
library(MASS)
library(MASS)
data("Boston")
str(Boston)
summary(Boston)
library(MASS)
data("Boston")
str(Boston)
summary(Boston)
pairs(Boston)
library(MASS)
data("Boston")
str(Boston)
dim(Boston)
summary(Boston)
pairs(Boston)
summary(Boston)
pairs(Boston)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(2)
library(tidyr, corrplot)
library(tidyr, corrplot)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
install.packages("corrplot")
library(tidyr, corrplot)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
library(tidyr corrplot)
library(tidyr)
library(corrplot)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="circle", type = "upper", cl.pos = "b", tl.pos = "d", tl.cex = 0.6)
# center and standardize variables
boston_scaled <- scale(Boston)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# summaries of the scaled variables
summary(boston_scaled)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
summary(crime)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
summary(crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, label = c("low", "med_low", "med_high", "high"))
summary(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 2)
library(dplyr)
library(dplyr)
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
table(correct = correct_classes, predicted = lda.pred$class)
data("Boston")
# center and standardize variables
boston_scaled <- scale(Boston)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# euclidean distance matrix
dist_eu <- dist(Boston)
# look at the summary of the distances
summary(dist_eu)
data("Boston")
# center and standardize variables
boston_scaled <- scale(Boston)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# euclidean distance matrix
dist_eu <- dist(Boston)
# look at the summary of the distances
summary(dist_eu)
# k-means clustering
km <-kmeans(Boston, centers = 4)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 4)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 4)
# plot the Boston dataset with clusters
pairs(Boston[5:15], col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 4)
# plot the Boston dataset with clusters
pairs(Boston[5:10], col = km$cluster)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:10, y = twcss, geom = 'line')
library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
library(ggplot2)
set.seed(123)
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(Boston, k)$tot.withinss})
# visualize the results
qplot(x = c(1:10), y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston[5:10], col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston[5:10], col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston[5:10], col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston[1:5], col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston[1:7], col = km$cluster)
pairs(Boston[8:14], col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston, col = km$cluster)
# k-means clustering
km <-kmeans(Boston, centers = 2)
# plot the Boston dataset with clusters
pairs(Boston[1:7], col = km$cluster)
pairs(Boston[8:14], col = km$cluster)
#Explore the structure and dimensions
str(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Explore the structure and dimensions
str(hd)
dim(hd)
summary(hd)
#Explore the gli data
str(gli)
dim(gli)
summary(gli)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
str(gli)
dim(gli)
summary(gli)
#Explore the gli data
str(gii)
dim(gii)
summary(gii)
colnames(hd)
colnames(hd)[1:2] <- c("rank", "hdi")
colnames(hd)
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
colnames(hd)
colnames(gii)
colnames(hd)
colnames(hd) <- c("rank", "country", "hdi", "le", "expedu", "meanedu", "gni", "gnihdi")
colnames(hd)
colnames(gii)
colnames(gii) <- c("rank", "country", "gii", "matmort", "adolbirthrate", "parliament", "femalesecedu", "malesecedu", "femalelabour", "malelabour")
colnames(gii)
colnames(gii)
colnames(gii) <- c("rank", "country", "gii", "matmort", "adolbirthrate", "parliament", "f2edu", "m2edu", "flabour", "mlabour")
colnames(gii)
library(dpyr)
gii <- mutate(gii, edu2ratio = f2edu / m2edu)
gii <- mutate(gii, labratio = flabour / mlabour)
library(dplyr)
gii <- mutate(gii, edu2ratio = f2edu / m2edu)
gii <- mutate(gii, labratio = flabour / mlabour)
colnames(gii)
#Data wrangling for the next week's data
#Read the "Human development" and "Gender inequality" data files
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Explore the hd data
str(hd)
dim(hd)
summary(hd)
#There are 8 variables and 195 observations in the data.
#The observations are countries which are ranked based on human development index.
#Explore the gli data
str(gii)
dim(gii)
summary(gii)
#There are 10 variables and 195 observations in the data
#The observations are countries which are ranked based on gender inequality index.
#Rename the columns of hd
colnames(hd)
colnames(hd) <- c("rank", "country", "hdi", "le", "expedu", "meanedu", "gni", "gnihdi")
colnames(hd)
#Rename the columns of hd
colnames(gii)
colnames(gii) <- c("rank", "country", "gii", "matmort", "adolbirthrate", "parliament", "f2edu", "m2edu", "flabour", "mlabour")
colnames(gii)
#Create sex-ratios of secondary education and labour force participation in the gii data
library(dplyr)
gii <- mutate(gii, edu2ratio = f2edu / m2edu)
gii <- mutate(gii, labratio = flabour / mlabour)
human <- inner_join(hd, gii, by = country, suffix = c(".hd", ".gii"))
human <- inner_join(hd, gii, by = "country", suffix = c(".hd", ".gii"))
str(human)
#Data wrangling for the next week's data
#Read the "Human development" and "Gender inequality" data files
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
#Explore the hd data
str(hd)
dim(hd)
summary(hd)
#There are 8 variables and 195 observations in the data.
#The observations are countries which are ranked based on human development index.
#Explore the gli data
str(gii)
dim(gii)
summary(gii)
#There are 10 variables and 195 observations in the data
#The observations are countries which are ranked based on gender inequality index.
#Rename the columns of hd
colnames(hd)
colnames(hd) <- c("hdrank", "country", "hdi", "le", "expedu", "meanedu", "gni", "gnihdi")
colnames(hd)
#Rename the columns of hd
colnames(gii)
colnames(gii) <- c("giirank", "country", "gii", "matmort", "adolbirthrate", "parliament", "f2edu", "m2edu", "flabour", "mlabour")
colnames(gii)
#Create sex-ratios of secondary education and labour force participation in the gii data
library(dplyr)
gii <- mutate(gii, edu2ratio = f2edu / m2edu)
gii <- mutate(gii, labratio = flabour / mlabour)
#Join the two data sets
#Join the two datasets by the selected identifiers
human <- inner_join(hd, gii, by = "country")
str(human)
dim(human)
write.csv(human, file = "human.csv", row.names = FALSE)
#Save the data
setwd("~/Documents/GitHub/IODS-project/data")
write.csv(human, file = "human.csv", row.names = FALSE)
